---
title:  "플러터 기본서"
excerpt : 모바일 앱 개발을 위한 다트 & 플러터 필요한 내용 정리 
categories:
  - 플러터
tags:
  - 개발
  - 플러터
toc: true
toc_sticky: true
---
# 분류 안됨
- 패딩: 내부여백 / 마진: 외부여백
- 문자열 출력할 때 $변수 형태도 가능. 
- private, public, protected 키워드가 없다. 따라서 해당 라이브러리 내에 private 하려면 식별자(변수명, 함수명) 앞에 _를 붙인다.    
- 함수에서 {}: 이름 있는 선택 매개변수, []: 위치적 선택 매개변수.   
- 매개변수의 _과 __는 사용하지 않는 매개변수를 나타낸다. 문법적인 요소가 아니고 dart 스타일 가이드에 명시된 내용이다.
- 익명 함수의 기본 형태는 다음과 같다.   
```
(매개변수명) { 표현식; };
ex) (a, b) { a + b; };
```
- 람다식의 기본 형태는 다음과 같다. 익명 함수와의 차이는 결국 {}; 를 => 로 변경한 것 밖에 없다.  
```
(매개변수명) => 표현식;
ex) (a, b) => a - b;
```

- Builder 부분의 익명함수의 매개변수의 원형은 (BuildContext context, T value, Widget child)이다. 
- as: 형 변환 연산자로, 다른 타입으로 변환은 되지 않고 상위 타입으로 변경할 수 있다.  
- is: 객체가 특정 타입이면 true. 
- assert는 조건식이 거짓이면 에러가 발생한다. 기본 형태는 다음과 같다.
```
assert(조건식);
ex) assert(a>0);
```

- 기본 생성자. 
클래스를 구현할 때 생성자를 생략하면 기본 생성자가 자동으로 제공된다. 기본 생성자는 클래스명과 동일하면서 인자가 없다. 또한 기본 생성자는 부모 클래스의 인수가 없는 생성자(기본 생성자)를 호출한다.
기본 생성자는 상속되지 않는다. 자식 클래스에서 아무 생성자도 선언하지 않으면 기본 생성자만 갖는다.

- 이름 있는 생성자. 
한 클래스 내에 많은 생성자를 생성하거나 생성자를 명확히 하기 위해서 사용할 수 있다. 이름 있는 생성자를 선언하면 기본 생성자는 생략할 수 없다.
```
main(){
    var person = Person();
    var init = Person.init();
}
class Person{
    Person(){
        print("Person 생성자");
    }
    
    Person.init(){
        print("Person.init 생성자")
    }
}
```

- 초기화 리스트. 
초기화 리스트를 사용하면 생성자의 구현부가 실행되기 전에 인스턴스 변수를 초기화할 수 있다. 초기화 리스트는 생성자 옆에 :으로 선언할 수 있다.
```
생성자: 초기화 리스트{
}
ex)
Person() : name = 'Kim'{
    print('This is Person($name) Constructor!');
}
```

- 리다이렉팅 생성자. 
초기화 리스트를 약간 응용하면 리다이렉팅을 위한 생성자를 만들 수 있다. 이러한 생성자는 본체가 비어 있고 메인 생성자에게 위임하는 역할을 한다.
```
main(){
    var person = Person.initName('Kim');
}
class Person{
    String name;
    int age;
    
    Person.initName(String name) : this(name, 20);
    
    Person(this.name, this.age){}
}
```

- 상수 생성자. 
상수 생성자는 생성자를 상수처럼 만들어 준다. 해당 클래스가 상수처럼 변하지 않는 객체를 생성한다는 것이다. 상수 생성자를 만들기 위해선 인스턴스 변수가 모두 final이어야 한다. 또한 생성자는 const 키워드가 붙어야 한다.
```
main(){
    Person person1 = const Person('Kim', 20); 
    Person person2 = const Person('Kim', 20);
    Person person3 = new Person('Kim', 20);
    Person person4 = new Person('Kim', 20);
    
    //person1 == person2 != person3 != person4
    
}
class Person{
    final String name;
    final num age;
    
    const Person(this.name, this.age);
}
```

- 팩토리 생성자. 
팩토리 생성자는 팩토리 패턴을 사용하기 편리하다. 팩토리 패턴을 사용하면 해당 클래스의 인스턴스를 매번 생성하지 않아도 된다. 보통 자식 클래스의 인스턴스를 리턴받는다.   
인스턴스 생성을 자식 클래스에게 위임한 것이다. 팩토리 패턴을 사용할 때 유용하도록 다트가 자체적으로 제공하는 것이 팩토리 생성자이다.  
```
class Person {
    factory Person(String type){
        switch (type){
            case 'Student':
                return Student();
            case 'Employee':
                return Employee();
        }
    }
}
class Student extends Person{
...
}
class Employee extends Person{
...
}
```

- 여러 추상 클래스의 임플리먼트. 
추상 클래스는 abstract, implements 키워드를 사용해야 한다.  
```
class Developer implements Person, Junior{
...
}
```

- 제네릭

  제네릭은 타입 매개변수를 통해 다양한 타입에 대한 유연한 대처를 가능하게 한다.

  List 가 그 예이다. <> 부분에 타입 매개변수를 지정한다.

  ```dart
  abstract class List<E> implements EfficientLengthIterable<E> {
    ...
    void add(E value);
    ...
  }
  ```

- 제네릭 메서드

  제네릭은 클래스뿐만 아니라 메서드에도 사용할 수 있다. 메서드의 리턴 타입, 매개변수를 제네릭으로 지정할 수 있다.

  ```dart
  void main(){
    var person = Person();
    print(person.getName<String>('Kim'));
  }
  
  class Person{
    T getName<T>(T param){
      return param;
    }
  }
  ```

- 비동기 프로그래밍

  요청한 작업의 결과를 기다리지 않고 바로 다음 작업으로 넘어감으로써 프로그램의 실행을 멈추지 않는다.

  

- Isolate

  isolate는 다트의 모든 코드가 실행되는 공간이다. 싱글 스레드를 갖고 이벤트 루프(이벤트 큐에 쌓여있는 작업들을 오래된 순으로 하나씩 가져와서 처리하는 역할) 를 통해 작업을 처리한다. 기본 isolate인 main isolate는 런타임에 생성된다.

  isolate가 싱글 스레드이지만 다트가 자체적인 비동기 프로그래밍을 지원하기 때문에 비동기 작업도 이벤트 루프에 의해서 적절히 처리된다. 또한 main isolate에서 무거운 작업으로 인해 반응성이 떨어진다면 추가로 isolate를 생성할 수 있다. 그러면 스레드가 2개가 되는 것이다. 다만 기존의 언어에서 사용하는 스레드와 차이가 있다.

  자바 등의 언어에서 사용하는 스레드는 스레드가 서로 메모리릉 공유한다. 하지만 isolate의 스레드는 자체적으로 메모리를 가지고 있다. 즉 메모리 공유가 되지 않는다. 따라서 두 isolate가 함께 작업하려면 message를 주고받아야 한다. 하지만 멀티스레드 사용 시 늘 주의해야 하는 공유자원에 대한 컨트롤에 신경 쓰지 않아도 된다.

- isolate 생성하기

  새로운 isolate는 spawn을 통해서 만들 수 있다.

  ```dart
  import 'dart:isolate';
  
  void main(){
  	Isolate.spawn(isolateTest, 1);
    Isolate.spawn(isolateTest, 2);
    Isolate.spawn(isolateTest, 3);
  }
  
  isolateTest(var m){
    print('isolate no.$m');
  }
  ```

- isolate간 message 주고 받기

  ```dart
  import 'dart:isolate';
  
  main(){
    int counter = 0;
    
    ReceivePort mainReceivePort = new ReceivePort();
    
    mainReceivePort.listen((fooSendPort){
      if (fooSendPort is SendPort){
        fooSendPort.send(counter++);
      } else{
        print(fooSendPort);
      }
    });
    
    for(var i = 0; i < 5; i++){
      Isolate.spawn(foo, mainReceivePort.sendPort);
    }
  }
  
  foo(SendPort mainSendPort){
    ReceivePort fooReceivePort = new ReceivePort();
    mainSendPort.send(fooReceivePort.sendPort);
    
    fooReceivePort.listen((msg){
      mainSendPort.send('received: $msg');
    });
  }
  ```

  

- Future, async, await

  future는 어떤 작업 결과값을 나중에 받기로 약속하는 것이다. 즉 요청한 작업의 결과를 기다리지 않고 바로 다음 작업으로 넘어간다. 그 후 작업이 완료되면 결과를 받는 방식으로 비동기 처리를 하는 것이다.

  또는 작업이 완료될 때까지 기다렸다가 결괏값을 받고 다음 작업으로 넘어갈 수도 있다. 이 경우는 async, await를 사용하면 가능하다.

  future는 세 가지 상태를 가진다. Uncompleted, Completed(data), Completed(error)

  future는 상태별로 다른 작업과 마찬가지로 event loop에 의해서 순차적으로 처리된다. 처음 future를 생성하여 작업을 시작하면 Uncompleted future가 event queue에 들어간다. 해당 작업이 완료되기 전까지는 다른 작업들이 event queue에 들어가고 event loop에 의해서 꺼내져 처리된다. 그러다 future가 작업을 끝내면 completed future가 event queue에 들어가고 event loop에 의해 선택되면 completed future가 가진 결과값이나 에러에 대한 처리를 하는 것이다.

- Future 에러처리

  completed future가 결괏값 대신에 에러를 가졌을 때는 onError를 통해서 처리된다.

  ```dart
  main(){
    print('start');
    
    Future<String> myFuture = new Future((){
      for(int i = 0 ; i < 1000000; i++){
      }
      return throw Exception('Failed: data is too many');
    });
    
    myFuture.then((data){
      print(data);
    },onError: (e){
      print(e);
    })
      
    print('do something');
  }
  ```

  onError와 catchError는 에러를 처리한다는 역할은 동일하지만 차이점이 있다. onError는 future에서 발생한 에러만 처리할 수 있다. 대신 catchErrorsms then()의 첫 번째 인자인 익명 함수 내부에서 발생한 에러까지 처리할 수 있다.

  ```dart
  main(){
    print('start');
    
    var myFuture = getData();
    myFuture.then((data) => print(data))
      .catchError((e) => print(e));
    
    print('do something');
  }
  
  Future<String> getData(){
    ...
  }
  ```

  

- Stream

  future는 하나의 데이터를 then()에서 수신했다. 반면 stream은 연속된 데이터를 listen()을 통해서 비동기적으로 처리할 수 있다.

  예를 들어 실시간 데이터를 처리할 때 future는 이미지 파일 하나를 다운로드하여 보여줄 때 적합하다면 stream은 동영상을 보여주는데 사용할 수 있다. stream은 흔히 말하는 스트리밍 서비스의 동작 방식과 다를 바 없는 것이다.

  stream은 구독자(관찰자) 패턴이다. 구독자가 관찰 대상을 구독하여 관찰 대상에 변화가 발생하면 구독자에게 그 변화를 알려준다.

  

  하나의 데이터에 대한 이벤트를 발생하는 stream을 생성한다.

  ```dart
  main(){
    print('start');
    var stream = Stream.value(100).listen((dynamic x) => print('$x'));
    print('do something');
  }
  ```

  Stream.periodic()은 특정 주기로 반복적으로 이벤트를 발생하는 stream을 만든다. 첫 번째 인자는 Duration() 객체이고, 두 번째 인자는 이벤트에서 발생한 값을 계산하는 함수이다. take()는 몇 회까지 반복할지 정해주는 역할을 한다.

  listen()은 stream의 변화를 관찰하여 변화가 있을 때, 즉 새로운 데이터 입력 시 해당 데이터를 출력해준다. 

  ```dart
  main(){
  	print('start');
  	var stream = Stream.periodic(Duration(seconds: 1), (x)=> x).take(5);
    stream.listen(print);
  }
  ```

  ```dart
  main(){
  	print('start');
  	var stream = Stream.periodic(Duration(seconds: 1), (x) => x+1).take(5).listen((x) => print('$x'));
    
    Stream.fromIterable(['one', '2.5', 'three', 4, 5])
      .listen((dynamic x) => print('$x'));
    
    Stream.fromFuture(getData()).
      listen((x) => print('$x'));
  }
  
  Future<String> getData() async{
    return Future.delayed(Duration(seconds: 3), () => 'after 3 seconds');
  }
  ```

- StreamController 사용하기

  비동기 함수에 의해서 전달되는 형태가 아니라 stream에 이벤트를 직접 지정해주고 싶다면 StreamController를 사용한다. StreamController로 stream을 만들고 이벤트를 채워 넣으면 된다.

  ```dart
  import 'dart:async';
  
  main(){
  	print('start');
  	
  	StreamController streamCtrl = StreamController();//스트림 컨트롤러 생성
  	streamCtrl.strea.listen((x) => print(x)); //구독을 등록한다.
  	
  	streamCtrl.add(100); //add()를 통해 이벤트를 추가한다.
  	streamCtrl.add('test');
  	streamCtrl.add(200);
  	streamCtrl.add(300);
  	streamCtrl.close();//stream을 닫는다.
  }
  ```

  하나의 stream에 대한 구독자(listen)은 하나만 등록할 수 있다. 만약 2개 이상 등록하고 싶으면 broadcast를 사용해야 한다.

  ```dart
  import 'dart:async';
  
  main(){
    print('start');
    
    var stream = Stream.periodic(Duration(seconds: 1), (x) => x + 1).take(3);
    stream.listen(print);
    //stream.listen(print) 하나 더 등록하면 에러난다.
    
    StreamController streamCtrl = streamController.broadcast();
    streamCtrl.stream.listen((x) => print('listen 1: $x'));
    streamCtrl.stream.listen((x) => print('listen 2: $x'));
    
    streamCtrl.add(100);
    streamCtrl.add(200);
    streamCtrl.add(300);
    streamCtrl.close();
   }
  ```

- Async*, yield 사용하기

  제너레이터(Generator) 함수는 반복 가능한 함수이다. 보통 함수는 return을 맞이하면 종료된다. 하지만 제너레이터 함수는 return 대신에 yield를 사용한다. 제너레이터 함수를 만드는 방법은 비동기 함수와 비슷하게 함수명 뒤에 async\*라는 키워드를 붙인다. 이러한 제너레이터 함수의 리턴 타입은 Stream이다. 다시 말하면 Stream 함수를 만들기 위해서 async\*를 사용하는 것이다.

  ```dart
  import 'dart:async';
  
  main(){
    var stream = getData();
    stream.listen((x) => print(x));
  }
  
  Stream<int> getData() async*{
    for(int i = 0; i < 5; i++){
      yield i;
    }
  }
  ```

  

# 3장

- State

  State는 기본적으로 다음의 특징을 가진다.

  1. 위젯이 빌드 완료된 후 읽을 수 있다. 따라서 build()함수 호출 전에 State 설정이 되어야 한다.
  2. 위젯이 유효한 동안에 State는 변경될 수 있다.

  State는 생성되면 BuildContext에 연결된다.

- BuildContext

  BuildContext는 위젯 트리에서 위젯의 위치에 대한 참조이다. 또한 하나의 BuildContext는 하나의 위젯만 가진다.

- Widget Tree

  위젯은 트리 구조로 구성되어 있다. 이것을 위젯 트리라고 한다.

  또한 부모 위젯과 자식 위젯이라는 개념이 있다. 예를 들면 Scaffold의 속성으로 구성된 AppBar, Center, FloatingActionButton은 자식 위젯이고 자식 위젯을 포함하고 있는 Scaffold는 부모 위젯이다.

- 플러터는 세 가지 트리를 가진다.

  - 위젯: 요소의 구성을 기술하고 처리한다.
  - 요소: 트리의 특정 위치에서 위젯을 인스턴스한다.
  - 렌더 객체: 크기, 레이아웃 등을 다루고 렌더링을 처리한다.

  요소 트리의 개념을 보면 BuildContext와 유사한 부분이 있다. 바로 위치이다. BuildContext가 트리에서 위젯의 위치에 관한 참조인데 요소는 특정 위치에서 위젯을 인스턴스화한 것이다. 결국 요소를 참조하는 것이 BuildContext인 것이다. 더 쉽게는 BuildContext가 요소라고 생각하면 된다.

  State 생성 => 트리의 특정 위치를 참조하는 BuildContext 존재 => 해당 BuildContext에 연결 => 연결된 각 BuildContext에 위젯 배치(인스턴스화) => 요소(Element) 생성



## 3.4 StatefulWidget 생명주기

1. createState()

   StatefulWidget 객체를 생성하면 당연히 생성자가 호출된다. 그 후 곧바로 createState()가 호출된다. StatefulWidget에서 필수적으로 오버라이드를 해야 하는 함수이다. 이 함수의 역할은 State 객체를 생성하는 일이다.

   state에 buildContext가 할당되고 이게 할당되면true를 리턴하는 mounted() 속성이 true로 변한다.

2. initState()

   State 객체가 생성되면 State 객체의 생성자가 호출된다. 이렇게 위젯이 최초 생성되는 상황이면 initState()가 호출된다. 즉 처음 한 번만 호출되고 호출되지 않는다는 뜻이다.

3. didChangeDependencies()

   initState()가 호출된 후에는 didChangeDependencies()가 호출된다. initState()는 최초 한 번만 호출된다고 했다. didChangeDependencies는 initState() 후에도 호출이 되지만 본질적으로는 해당 위젯이 의존하는 위젯이 변경되면 호출된다. 쉽게 말하자면 위젯 A가 위젯 B를 상속받았는데 위젯 B가 업데이트될 때 호출된다.

4. build()

   build()를 통해서 위젯이 그려진다(render). State 클래스에서 반드시 오버라이딩이 되어야 하는 함수이다. 그렇지 않으면 에러로 알려준다. 위젯을 그려주는 역할을 하기 때문에 최초는 물론 변경이 있을 때마다 호출이 된다.

5. setState()

   State 객체의 상태가 변경되었다는 것을 프레임워크에 알리는 용도이다. 따라서 State 객체의 상태가 변경될 때마다 setState() 함수를 통해서 알려야 한다. 그래야만 프레임워크가 build() 함수를 호출할 준비를 한다.

6. didUpdateWidget()

   부모 위젯이 재빌드되어 위젯이 갱신될 때 호출된다. didUpdateWidget()이 호출된 후에는 항상 build()를 호출한다. 따라서 만약 didUpdateWidget() 내에서 setState()를 호출하면 build()를 중복 호출하는 것이다.

7. deactivate()

   트리에서 State 객체가 제거될 때마다 호출된다. 어떤 경우에는 프레임워크가 제거된 State 객체를 트리의 다른 부분에 다시 삽입하기도 한다. 이 경우에는 State 객체가 트리의 새로운 위치에 적응할 수 있는 기회를 주기 위해 build()를 호출한다. 

   즉 이것만 호출되고 dispose가 호출되지 않으면 완전히 제거된 것이 아니다.

8. dispose()

   트리에서 State 객체가 영구적으로 제거될 때 호출된다. 영구적으로 제거되었기 때문에 build()가 다시 호출되지 않는다. 이미 State 객체가 폐기되었기 때문에 dispose()에서 setState()를 호출하면 안 된다. mounted() 가 false된다.

9. reassemble()

   hot reload를 실행하면 reassemble()이 호출되고, reassemble()이 호출되면 build()도 호출된다.



# 5장

- 페이지뷰



# 6장 - 화면 전환 및 상태관리



## 6.1 Navigator와 Route



- Navigator와 Route는 화면 전환에서 가장 중요한 두 개념이다. Navigator는 스택 방식으로 자식 위젯들을 관리한다. Push()와 pop()으로 위젯을 쌓고 제거하는 방식으로 우리에게 보여지는 화면을 제어하는 것이다.

- Route는 Navigator가 관리하는 위젯을 추상화하여 코드적으로 좀 더 간결함을 제공한다.

  이동하는 화면의 클래스명에 대한 별명을 지정한다고 생각하면 된다.



## 6.2 상태관리



- Provider를 사용할 때 얻는 장점은 다음과 같다.

  1) 데이터 생성과 소비의 분리: Provider는 데이터를 생성하는 부분과 소비하는 부분이 구분된다. 이렇게 되면 한 클래스가 담당하는 부분이 나눠지기 때문에 클래스의 크기가 줄어들고 기능이 명확해진다.
  2) 공유 데이터를 쉽게 구현: 앞서 이야기한 공유 데이터의 문제점을 고려할 필요 없이 공통으로 사용하는 데이터를 쉽게 구현할 수 있다.
  3) 코드 간결성: 데이터를 전달하는 방식을 사용하면 코드도 복잡해지고 길어진다. Singleton 패턴을 사용한다고 해도 해당 데이터를 사용하는 모든 곳에 상태 변경을 알리기 위한 코드를 작성해야 한다. 하지만 Provider는 내부적으로 이런 동작을 제공한다.

- Provider로 데이터를 생성할 때의 기본 구조는 다음과 같다.

  ```dart
  Provider<T>.value(
  	value: 전달할 데이터,
    child: Provider의 데이터 상태를 사용할 위젯,
  )
   
  //ex)
  Provider<String>.value(
  	value: 'Sample Data',
    child: MaterialApp(),
  )
  ```

  Provider의 데이터 상태를 사용할 범위를 지정해야 하는데 child 매개변수에 위젯을 지정하면 그 위젯의 자식 위젯까지 모두 포함된다. 따라서 child를 MaterialApp()으로 하면 앱 전체에서 사용할 수 있다.

- 데이터를 사용하는 방법은 Provider.of() 또는 Consumer()를 사용하면 된다.

  ```dart
  //ex)
  Provider.of<String>(context, listen: false);
  
  //또는
  
  Consumer<String>(
    builder: (context, value, child){
      return Text('$value');
    }
  )
  ```

  Provider.of() 는 데이터에 접근하여 사용은 하지만 UI 변경은 필요 없는 경우에 사용할 수 있다. 변경에 대한 알림을 받지 않기 위해서 listen 매개변수의 값을 false로 하면 된다.

  Consumer()는 데이터가 갱신되어 상태 변경이 발생하면 builder에 지정된 위젯만 재빌드한다. 따라서 해당 데이터 갱신과 무관한 위젯까지 재빌드하는 비효율적인 동작을 하지 않는다. 그러므로 꼭 상태 변경이 필요한 위젯에 사용하는 것이 좋다.

- MultiProvider를 사용하면 다수의 위젯을 children으로 처리한 것처럼 providers로 처리할 수 있다. 그러면 가독성이 좋아진다. 
- 기존에는 변경된 데이터를 UI에 표시하기 위해서 setState()를 사용하여 재빌드를 했다. 플러터에는 이와 동일한 역할을 하는 ChangeNotifier 클래스를 제공한다. ChangeNotifierProvider는 ChangeNotifier와 같이 사용하여 상태 변경에 대한 알림을 받고 바로 UI에 적용할 수 있다.
- Todo: Provider, bloc, getx 상태관리 정리



# 7. 애니메이션



## 7.1 암시적 애니메이션



- 암시적 애니메이션은 속성에 새로운 속성을 지정하고 setState()와 같은 함수로 재빌드하도록 하면 애니메이션을 구동한다. 예를 들어 width를 100으로 지정한 상태에서 200으로 변경한 후 재빌드할 때 크기가 애니메이션으로 움직이면서 커진다.
- 암시적 애니메이션은 크게 두 가지로 나뉜다. 하나는 내장된 암시적 애니메이션인 AnimatedFoo이고 다른 하나는 내장된 애니메이션이 없는 위젯에 애니메이션을 적용할 때 사용하는 TweenAnimationBuilder이다. 이 두 가지를 살펴보자.



#### 내장된 암시적 애니메이션

- 플러터에 기본적으로 내장된 암시적 애니메이션은 AnimationFoo와 같은 형태의 이름을 가진다. Foo는 앞서 살펴보았던 몇몇 위젯들로 대체하면 된다. 예를 들면 Container 위젯에 애니메이션을 적용하려면 AnimatedContainer를 사용하면 된다.
- 애니메이션을 적용하지 않고도 동적으로 크기를 변경할 수 있다. 하지만 시각적인 효과에서 오는 차이가 크다. 즉 앱 퀄리티가 낮아진다.

#### TweenAnimationBuilder

- 기본으로 애니메이션이 내장되지 않은 위젯도 있다. 이런 위젯도 애니메이션 효과를 줄 수 있다. 바로 TweenAnimationBuilder를 사용하면 된다. TweenAnimationBuilder는 대상에 대한 값이 변경할 때 위젯을 그 값에 따라 애니메이션화하도록 한다. 이 때 애니메이션화되는 타입은 사용하는 Tween의 종류로 정해진다. 예를들어 Color 위젯을 통해 색상을 변경하는 작업이라면 ColorTween을 사용한다. 기본 형태인 Tween은 애니메이션의 처음과 끝 값을 double형의 0.0~1.0 사이의 값으로 적절히 매핑시켜 준다.

## 7.2 명시적 애니메이션

- 암시적 애니메이션은 기본 애니메이션을 제공한다. 기본 애니메이션은 반복성이 없다. Tween에도 begin과 end가 있다. 즉 한 번 진행된 후 끝이다. 하지만 명시적 애니메이션은 애니메이션 동작이 처음으로 다시 되돌아가거나 반복적으로 동작하는 등의 제어를 할 수 있다. 명시적 애니메이션은 FooTransition의 형태이다.
- FooTransition을 사용할 때는 크게 세 단계를 생각하면 된다.
  1) State에 SingleTickerProviderStateMixin 상속
  2) AnimationController 생성
  3) FooTransition 생성

## 7.3 Hero 위젯

- 화면 이동 전후에 애니메이션을 적용할 위젯을 Hero 위젯으로 감싸면 된다. 한 화면에서 다른 화면으로 이동할 때 애니메이션 효과를 제공한다.





테스트
