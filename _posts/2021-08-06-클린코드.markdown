---
title:  "클린코드"
excerpt : 클린코드 내용 정리
categories:
  - 코딩 도서
tags:
  - 코딩 도서
  - 개발
toc: true
toc_sticky: true
---
클린 코드 내용 정리

# 1. 깨끗한 코드

- 좋은 코드는 중요하다

- 르블랑의 법칙: 나중은 결코 오지 않는다.

- 나쁜 코드가 쌓일수록 팀 생산성은 떨어진다. 그러다 마침내 0에 근접한다.

- 나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다. 
(급한 환자의 말을 듣고 수술전에 손을 씻지 않는 의사와 같다.)

- 빨리 가는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.

- 깨끗한 코드와 나쁜 코드를 구분할 줄 안다고 깨끗한 코드를 작성할 줄 안다는 것은 아니다.

## 1.1 깨끗한 코드란?  

- cpu 자원을 낭비하지 않는 코드
- 세세한 사항까지 꼼꼼하게 처리하는 코드
- 가독성이 좋고 명쾌해야 한다.
- 다른 사람이 고치기 쉬워야 한다.
- 주의를 기울인 코드
- 중복을 피해야 한다.
- 한 기능만 수행해야 한다.
- 작게 추상화한다.
- 읽으면서 짐작한 대로 돌아가야 한다.

- 코드를 읽는 시간 대 코드를 짜는 시간 비율이 10대 1을 넘는 경우도 있다. 새 코드를 짜면서 우리는 끊임없이 기존 코드를 읽는다.

- 체크아웃할 때보다 좀 더 깨끗한 코드를 체크인한다면 코드는 절대 나빠지지 않는다.


# 2. 의미있는 이름

## 2.1. 이름을 잘 짓는 간단한 규칙

- 의도를 분명히 밝혀라, 이름은 존재 이유/수행 기능/사용 방법을 분명히 나타내야 한다.
```
if (cell[STATUS_VALUE] == FLAGGED)
```
보다 아래 코드가 좋다.
```
if (cell.isFlagged())
```

- 널리 쓰이는 의미가 있는 단어를 다른 의미로 사용하면 안 된다.
- 실제 List 자료구조를 사용하지 않는다면 변수명을 accountList라 명명하면 안된다.
- 서로 흡사한 이름을 사용하지 않는다.
- 소문자 L과 대문자 O 사용에 주의한다.

- 변수명을 의미있게 구분해라. arr - brr, a1 - a2 ... aN 은 부적절하다. 읽는 사람이 차이를 알아야 한다.

- 발음하기 쉬운 이름을 사용해라.

- 검색하기 쉬운 이름을 사용해라. 문자 하나를 사용하는 이름은 검색이 어렵다.
- 이름 길이는 범위 크기에 비례해야 한다. 여러 곳에서 사용하는 변수는 검색하기 쉬운 이름이 바람직하다.

- 이름에 인코딩을 피해라.
- 인터페이스 클래스와 구현 클래스 중에선 구현 클래스 이름을 인코딩 하는 것이 좋다. C[...] or [...]Imp

- 루프에서 반복 횟수를 세는 변수 i, j, k는 괜찮다. 단, 루프 범위가 아주 작고 다른 이름과 충돌하지 않을 때만

- 클래스 이름과 객체 이름은 명사나 명사구가 적합하다.
- 메서드 이름은 동사나 동사구가 적합하다.
- 접근자-get 변경자-set 조건자-is 표준에 따른 메서드 접두사를 사용한다.
- 생성자를 중복정의 할 때는 [정적 팩토리 메서드](https://velog.io/@ljinsk3/%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C)를 사용한다.
```
Complex fulcrumPoint = new Complex(23.0);
```
보다 아래 코드가 좋다.
```
Complex fulcrumPoint = Complex.FromRealNumber(23.0);
```

- 추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다. 예를 들어, 똑같은 메서드를 클래스마다 fetch, retrieve, get으로 제각각 부르면 혼란스럽다. (controller-manager-driver도 마찬가지)

- 한 단어를 두 가지 목적으로 사용하지 마라. 예를 들어, 값을 더해 새로운 값을 만드는 add 메서드와 집합에 값 하나를 추가하는 insert/append 는 구별해야 한다.

- 프로그래밍 용어를 사용하되, 적절한 용어가 없다면 문제 영역에서 이름을 가져와라.

- 클래스, 함수, 이름 공간에 넣어 의미있는 맥락을 부여해라. 모든 방법이 실패하면 마지막으로 접두어를 붙여라.

- 의미가 분명하다면 불필요한 맥락을 없애라. 일반적으론 짧은 이름이 긴 이름보다 좋다. 
